# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "development" branch
  push:
    branches: [ "release" ]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Install node depedencies
        run: npm i
        
      - name: Set environment to production
        run: node ./set-environment.js production

      - name: Get Version Number
        uses: nyaayaya/package-version@v1
        with:
          path: 'package.json'
          follow-symlinks: false

      - name: Create release body
        run: |
          echo "Latest Commit Message: ${{ github.event.head_commit.message }}" >> release.txt

      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PACKAGE_VERSION }}-${{ github.run_number }}
          release_name: "Release ${{ env.PACKAGE_VERSION }}-${{ github.run_number }}"
          draft: true
          prerelease: false
          body_path: release.txt

      - name: Webpack
        run: npm run build

      - name: Zip Release
        uses: vimtor/action-zip@v1
        with:
          files: dist/
          dest: release.zip

      - name: Upload HTML5 artifact to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: TheVeryThirsyPlantAndTheLabyrinthOfGhosts.${{ env.PACKAGE_VERSION }}-${{ github.run_number }}-HTML5.zip
          asset_content_type: application/zip

      - name: Copy the node_modules for electron-builder
        run: cp -r .\node_modules\ .\dist

      - name: Save the signing key into storage
        run: 
          echo "${{ secrets.KEY_PFX }}" >> key.pfx.asc

      - name: Decode the base64 encoded key
        shell: powershell
        run: |
          $decoded = [System.Convert]::FromBase64String($(Get-Content -Path 'key.pfx.asc' -Raw))
          Set-Content key.pfx -Value $decoded -Encoding Byte

      - name: Build the standalone Windows executable
        run: npm run build:electron production ./key.pfx ${{ secrets.KEY_PFX_PASSWORD }}

      - name: Upload standalone executable artifact to release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/dist/The Very Thirsty Plant and the Labyrinth of Ghosts ${{ env.PACKAGE_VERSION }}.exe
          asset_name: The Very Thirsty Plant and the Labyrinth of Ghosts ${{ env.PACKAGE_VERSION }}-${{ github.run_number }}.exe
          asset_content_type: application/octet-stream
          
      - name: Publish release in GitHub
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
